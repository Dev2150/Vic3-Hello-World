name: 'Mod Validation'

on:
  push:
    branches: ['main', 'development']
  pull_request:
    branches: ['main', 'development']

jobs:
  validate-scripts:
    name: 'Validate with Tiger'
    runs-on: self-hosted

    steps:
      - name: 'Checkout Mod Code'
        uses: actions/checkout@v4

      - name: 'Run Tiger Validation'
        shell: powershell
        run: |
          # --- Step 1: Get Variables ---
          $tigerExecutable = "${{ vars.TIGER_EXECUTABLE_PATH }}"
          $vanillaGamePath = "${{ vars.VANILLA_GAME_PATH }}"
          $modPath = "${{ vars.MOD_PATH }}"
          
          # --- Step 2: Verify Variables ---
          echo "Tiger Executable Path: $tigerExecutable"
          echo "Vanilla Game Path: $vanillaGamePath"
          echo "Mod Path: $modPath"
          
          if (-not (Test-Path $tigerExecutable)) {
            echo "ERROR: Tiger executable not found at '$tigerExecutable'"
            exit 1
          }
          if (-not (Test-Path $vanillaGamePath)) {
            echo "ERROR: Vanilla game path not found at '$vanillaGamePath'"
            exit 1
          }
          
          if (-not (Test-Path $modPath)) {
            echo "ERROR: Mod path not found at '$modPath'"
            exit 1
          }
          
          # --- Step 3: Run the Executable ---
          echo "--- Running Tiger ---"
          
          # We execute the .exe directly.
          # The '&' is the PowerShell "call operator", used to run commands with paths/arguments in variables.
          # We pass the arguments it expects, which are likely similar to the source code version.
          $tigerOutput = & $tigerExecutable --vanilla-path "$vanillaGamePath" --path "." | Tee-Object -Variable tigerOutputString

          # This uses a regular expression to find the "error: [number]" part of the summary.
          $match = $tigerOutputString | Select-String -Pattern "error: (\d+)"

          if ($match) {
            # We found the line. Now get the number of errors.
            $errorCount = [int]$match.Matches[0].Groups[1].Value
          
            echo "Tiger found $errorCount errors."

            # 3. If the number of errors is greater than 0, fail the workflow.
            if ($errorCount -gt 0) {
              echo "::error::Failing workflow because Tiger reported $errorCount errors."
              exit 1
            }
          }

          # 4. If we get here, it means either no "error:" line was found, or the count was 0.
          echo "Tiger validation passed with no errors."